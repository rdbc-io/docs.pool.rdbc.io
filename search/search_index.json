{
    "docs": [
        {
            "location": "/",
            "text": "What is rdbc-pool?\n\u00b6\n\n\nrdbc-pool is a connection pool implementation for \nrdbc\n.\n\n\nrdbc API\n\u00b6\n\n\nYou'll be using this connection pool along with the API which usage is not\ncovered by this documentation. This guide describes things that are specific\nto the pool itself. Please head to the \nAPI documentation site\n\nfor detailed information on API usage and general rdbc concepts.\n\n\nGetting help\n\u00b6\n\n\nJoin \nrdbc-io/rdbc\n gitter channel for \nquestions and any kind of discussion about rdbc and the pool.\n\n\nSee also \nrdbc\n\ntag on StackOverflow.\n\n\nLicense\n\u00b6\n\n\nrdbc-pool is an open source software licensed under\n\nApache License 2.0\n.",
            "title": "Introduction"
        },
        {
            "location": "/#what-is-rdbc-pool",
            "text": "rdbc-pool is a connection pool implementation for  rdbc .",
            "title": "What is rdbc-pool?"
        },
        {
            "location": "/#rdbc-api",
            "text": "You'll be using this connection pool along with the API which usage is not\ncovered by this documentation. This guide describes things that are specific\nto the pool itself. Please head to the  API documentation site \nfor detailed information on API usage and general rdbc concepts.",
            "title": "rdbc API"
        },
        {
            "location": "/#getting-help",
            "text": "Join  rdbc-io/rdbc  gitter channel for \nquestions and any kind of discussion about rdbc and the pool.  See also  rdbc \ntag on StackOverflow.",
            "title": "Getting help"
        },
        {
            "location": "/#license",
            "text": "rdbc-pool is an open source software licensed under Apache License 2.0 .",
            "title": "License"
        },
        {
            "location": "/scala/installation/",
            "text": "Adding rdbc-pool to your project\n\u00b6\n\n\nrdbc and rdbc-pool JARs are published to\n\nMaven Central\n\nrepository. The library is currently available for Scala 2.11 and 2.12 and requires\nJava 8 runtime or later. rdbc-pool targets {{rdbc_version}} rdbc API version.\n\n\nSBT\n\u00b6\n\n\nFor sbt projects, add the following to \nbuild.sbt\n:\n\n\nlibraryDependencies\n \n++=\n \nVector\n(\n\n  \n\"io.rdbc\"\n \n%%\n \n\"rdbc-api-scala\"\n \n%\n \n\"{{rdbc_version}}\"\n,\n\n  \n\"io.rdbc.pool\"\n \n%%\n \n\"rdbc-pool-scala\"\n \n%\n \n\"{{version}}\"\n\n\n)\n\n\n\n\n\n\nGradle\n\u00b6\n\n\nFor Gradle projects, add the following to the \ndependencies\n section of \nbuild.gradle\n:\n\n\nScala 2.12\n\n\ncompile\n \ngroup:\n \n'io.rdbc'\n,\n \nname:\n \n'rdbc-api-scala_2.12'\n,\n \nversion:\n \n'{{rdbc_version}}'\n\n\ncompile\n \ngroup:\n \n'io.rdbc.pool'\n,\n \nname:\n \n'rdbc-pool-scala_2.12'\n,\n \nversion:\n \n'{{version}}'\n\n\n\n\n\n\nScala 2.11\n\n\ncompile\n \ngroup:\n \n'io.rdbc'\n,\n \nname:\n \n'rdbc-api-scala_2.11'\n,\n \nversion:\n \n'{{rdbc_version}}'\n\n\ncompile\n \ngroup:\n \n'io.rdbc.pool'\n,\n \nname:\n \n'rdbc-pool-scala_2.11'\n,\n \nversion:\n \n'{{version}}'\n\n\n\n\n\n\nMaven\n\u00b6\n\n\nFor Maven projects, add the following to the \ndependencies\n element of \npom.xml\n:\n\n\nScala 2.12\n\n\n<dependency>\n\n  \n<groupId>\nio.rdbc\n</groupId>\n\n  \n<artifactId>\nrdbc-api-scala_2.12\n</artifactId>\n\n  \n<version>\n{{rdbc_version}}\n</version>\n\n\n</dependency>\n\n\n<dependency>\n\n  \n<groupId>\nio.rdbc.pool\n</groupId>\n\n  \n<artifactId>\nrdbc-pool-scala_2.12\n</artifactId>\n\n  \n<version>\n{{version}}\n</version>\n\n\n</dependency>\n\n\n\n\n\n\nScala 2.11\n\n\n<dependency>\n\n  \n<groupId>\nio.rdbc\n</groupId>\n\n  \n<artifactId>\nrdbc-api-scala_2.11\n</artifactId>\n\n  \n<version>\n{{rdbc_version}}\n</version>\n\n\n</dependency>\n\n\n<dependency>\n\n  \n<groupId>\nio.rdbc.pool\n</groupId>\n\n  \n<artifactId>\nrdbc-pool-scala_2.11\n</artifactId>\n\n  \n<version>\n{{version}}\n</version>\n\n\n</dependency>",
            "title": "Installation"
        },
        {
            "location": "/scala/installation/#adding-rdbc-pool-to-your-project",
            "text": "rdbc and rdbc-pool JARs are published to Maven Central \nrepository. The library is currently available for Scala 2.11 and 2.12 and requires\nJava 8 runtime or later. rdbc-pool targets {{rdbc_version}} rdbc API version.",
            "title": "Adding rdbc-pool to your project"
        },
        {
            "location": "/scala/installation/#sbt",
            "text": "For sbt projects, add the following to  build.sbt :  libraryDependencies   ++=   Vector ( \n   \"io.rdbc\"   %%   \"rdbc-api-scala\"   %   \"{{rdbc_version}}\" , \n   \"io.rdbc.pool\"   %%   \"rdbc-pool-scala\"   %   \"{{version}}\"  )",
            "title": "SBT"
        },
        {
            "location": "/scala/installation/#gradle",
            "text": "For Gradle projects, add the following to the  dependencies  section of  build.gradle :  Scala 2.12  compile   group:   'io.rdbc' ,   name:   'rdbc-api-scala_2.12' ,   version:   '{{rdbc_version}}'  compile   group:   'io.rdbc.pool' ,   name:   'rdbc-pool-scala_2.12' ,   version:   '{{version}}'   Scala 2.11  compile   group:   'io.rdbc' ,   name:   'rdbc-api-scala_2.11' ,   version:   '{{rdbc_version}}'  compile   group:   'io.rdbc.pool' ,   name:   'rdbc-pool-scala_2.11' ,   version:   '{{version}}'",
            "title": "Gradle"
        },
        {
            "location": "/scala/installation/#maven",
            "text": "For Maven projects, add the following to the  dependencies  element of  pom.xml :  Scala 2.12  <dependency> \n   <groupId> io.rdbc </groupId> \n   <artifactId> rdbc-api-scala_2.12 </artifactId> \n   <version> {{rdbc_version}} </version>  </dependency>  <dependency> \n   <groupId> io.rdbc.pool </groupId> \n   <artifactId> rdbc-pool-scala_2.12 </artifactId> \n   <version> {{version}} </version>  </dependency>   Scala 2.11  <dependency> \n   <groupId> io.rdbc </groupId> \n   <artifactId> rdbc-api-scala_2.11 </artifactId> \n   <version> {{rdbc_version}} </version>  </dependency>  <dependency> \n   <groupId> io.rdbc.pool </groupId> \n   <artifactId> rdbc-pool-scala_2.11 </artifactId> \n   <version> {{version}} </version>  </dependency>",
            "title": "Maven"
        },
        {
            "location": "/scala/creating/",
            "text": "A connection pool is a specialized \nConnectionFactory\n implementation that\nmaintains a set of ready to use connections and performs connection validation\nbefore returning them to clients. The pool delegates connection requests to \nunderlying factory provided by client during pool creation.\n\n\nCreating a pool\n\u00b6\n\n\nThe pool is implemented in \nConnectionPool\n class.  To create instance of\nthe pool use \nConnectionPool\n companion object's \napply\n method as follows:\n\n\n1\n2\n3\n4\n5\n6\nimport\n \nio.rdbc.pool.sapi.ConnectionPool\n\n\nimport\n \nio.rdbc.pool.sapi.ConnectionPoolConfig\n\n\n\nval\n \ncf\n:\n \nConnectionFactory\n \n=\n \n???\n\n\n\nval\n \npool\n \n=\n \nConnectionPool\n(\ncf\n,\n \nConnectionPoolConfig\n())\n\n\n\n\n\n\n\nTo create the pool you first need to create and configure a connection factory\nprovided by rdbc driver you use (see the line 4 in the above snippet) and then\npass it as the \nConnectionPool#apply\n argument (line 6). The second argument\nof the \napply\n method is \nConnectionPoolConfig\n instance holding the pool\nconfiguration. See \nconfiguration\n chapter for available\nconfiguration options.\n\n\nClosing a pool\n\u00b6\n\n\nAs any other \nConnectionFactory\n, a pool needs to be shut down to clean up\nresources. Use \nConnectionPool#shutdown\n method to do it.",
            "title": "Creating a pool"
        },
        {
            "location": "/scala/creating/#creating-a-pool",
            "text": "The pool is implemented in  ConnectionPool  class.  To create instance of\nthe pool use  ConnectionPool  companion object's  apply  method as follows:  1\n2\n3\n4\n5\n6 import   io.rdbc.pool.sapi.ConnectionPool  import   io.rdbc.pool.sapi.ConnectionPoolConfig  val   cf :   ConnectionFactory   =   ???  val   pool   =   ConnectionPool ( cf ,   ConnectionPoolConfig ())    To create the pool you first need to create and configure a connection factory\nprovided by rdbc driver you use (see the line 4 in the above snippet) and then\npass it as the  ConnectionPool#apply  argument (line 6). The second argument\nof the  apply  method is  ConnectionPoolConfig  instance holding the pool\nconfiguration. See  configuration  chapter for available\nconfiguration options.",
            "title": "Creating a pool"
        },
        {
            "location": "/scala/creating/#closing-a-pool",
            "text": "As any other  ConnectionFactory , a pool needs to be shut down to clean up\nresources. Use  ConnectionPool#shutdown  method to do it.",
            "title": "Closing a pool"
        },
        {
            "location": "/scala/features/",
            "text": "The project provides a thread-safe, non-blocking connection pool implementation\ncurrently providing a basic feature set. Apart from maintaining a connection pool\nit provides the following features:\n\n\n\n\n\n\nConnection validation.\n\n\nConnections a connection is returned to client it is validated using\n\nConnection#validate\n method.\n\n\n\n\n\n\nRollback on return.\n\n\nOn every connection returned to the pool a rollback operation is performed\nto ensure that clients don't get connections with previously started\nand abandoned transactions.\n\n\n\n\n\n\nQueueing connection requests.\n\n\nConnection requests don't block the executing thread (as per \nConnectionFactory\n contract).\nInstead, a connection request queue is maintained.\n\n\n\n\n\n\nFor planned features see GitHub issues labeled with \nfeature\n label\n\nhere\n.",
            "title": "Features"
        },
        {
            "location": "/scala/configuration/",
            "text": "The pool configuration is represented by \nConnectionPoolConfig\n\ninstance. Instances of this class can be created using its companion object's\n\napply\n method. Every parameter of this method has some default value\nso you can use named parameters to set only some configuration options and\nkeep others at defaults.\n\n\nOptions\n\u00b6\n\n\nThe list below contains available configuration options.\n\n\n\n\n\n\nname\n\n\nName of the pool \u2014 appears in logs.\n\n\nDefault value: \n\"unnamed\"\n.\n\n\n\n\n\n\n\n\n\n\n\n\nsize\n\n\nSize of the pool. The pool will maintain at most \nsize\n connections\n at any given time, this includes both idle and in-use connections. If some\n connection is closed the pool will do its best to replace it as soon as\n possible so that the pool always contains \nsize\n connections. \n\n\nDefault value: \n20\n.\n\n\n\n\n\n\n\n\n\n\n\n\nconnectionValidateTimeout\n\n\nConnections are always validated before being returned to clients.\n If the connection validity can't be determined in this time, the connection\n is considered invalid and is closed and eventually removed from the pool.\n\n\nDefault value: \nTimeout\n(\n5.\nseconds\n)\n.\n\n\n\n\n\n\n\n\n\n\n\n\nconnectionCreateTimeout\n\n\nIf opening the connection doesn't finish in this time, the attempt is aborted.\n Note that this property doesn't control the maximum time which clients will wait\n for connections \u2014 it's for pool's internal connection requests. \n\n\nDefault value: \nTimeout\n(\n5.\nseconds\n)\n.\n\n\n\n\n\n\n\n\n\n\n\n\nconnectionRollbackTimeout\n\n\nWhen clients return connections to the pool, the pool rolls back any transaction\n that may be in progress so that other clients are unaffected by previous connection\n usage. This property controls maximum time that the rollback operation can take.\n If it takes longer the connection is closed and removed from the pool. \n\n\nDefault value: \nTimeout\n(\n5.\nseconds\n)\n.\n\n\n\n\n\n\n\n\n\n\n\n\ntaskSchedulerFactory\n\n\nA function that creates task scheduler for pool's internal use. The\n scheduler is used to schedule connection request timeouts.\n\n\nDefault value: \nA function creating JDK scheduler that uses a single thread\n and the global execution context for internal asynchronous executions.\n\n\n1\n2\n()\n \n=>\n \nnew\n \nJdkScheduler\n(\nExecutors\n.\nnewSingleThreadScheduledExecutor\n())\n\n                      \n(\nExecutionContext\n.\nglobal\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexecutionContext\n\n\nAn execution context that will be used by the pool internally to execute\n callbacks on \nFuture\ns and any asynchronous operations it needs. The\n operations executed are guaranteed to be non-blocking.\n\n\nDefault value: \nExecutionContext\n.\nglobal\n.\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nThe snippet below creates a pool specifying its name, size and validation timeout.\n\n\nimport\n \nscala.concurrent.duration._\n\n\n\nimport\n \nio.rdbc.sapi._\n\n\nimport\n \nio.rdbc.pool.sapi._\n\n\n\nval\n \ncf\n:\n \nConnectionFactory\n \n=\n \n???\n\n\n\nval\n \npool\n \n=\n \nConnectionPool\n(\ncf\n,\n \nConnectionPoolConfig\n(\n\n              \nname\n \n=\n \n\"mypool\"\n,\n\n              \nsize\n \n=\n \n50\n,\n\n              \nconnectionValidateTimeout\n \n=\n \n5.\nseconds\n.\ntimeout\n)\n\n           \n)",
            "title": "Configuration"
        },
        {
            "location": "/scala/configuration/#options",
            "text": "The list below contains available configuration options.    name  Name of the pool \u2014 appears in logs.  Default value:  \"unnamed\" .       size  Size of the pool. The pool will maintain at most  size  connections\n at any given time, this includes both idle and in-use connections. If some\n connection is closed the pool will do its best to replace it as soon as\n possible so that the pool always contains  size  connections.   Default value:  20 .       connectionValidateTimeout  Connections are always validated before being returned to clients.\n If the connection validity can't be determined in this time, the connection\n is considered invalid and is closed and eventually removed from the pool.  Default value:  Timeout ( 5. seconds ) .       connectionCreateTimeout  If opening the connection doesn't finish in this time, the attempt is aborted.\n Note that this property doesn't control the maximum time which clients will wait\n for connections \u2014 it's for pool's internal connection requests.   Default value:  Timeout ( 5. seconds ) .       connectionRollbackTimeout  When clients return connections to the pool, the pool rolls back any transaction\n that may be in progress so that other clients are unaffected by previous connection\n usage. This property controls maximum time that the rollback operation can take.\n If it takes longer the connection is closed and removed from the pool.   Default value:  Timeout ( 5. seconds ) .       taskSchedulerFactory  A function that creates task scheduler for pool's internal use. The\n scheduler is used to schedule connection request timeouts.  Default value:  A function creating JDK scheduler that uses a single thread\n and the global execution context for internal asynchronous executions.  1\n2 ()   =>   new   JdkScheduler ( Executors . newSingleThreadScheduledExecutor ()) \n                       ( ExecutionContext . global )         executionContext  An execution context that will be used by the pool internally to execute\n callbacks on  Future s and any asynchronous operations it needs. The\n operations executed are guaranteed to be non-blocking.  Default value:  ExecutionContext . global .",
            "title": "Options"
        },
        {
            "location": "/scala/configuration/#examples",
            "text": "The snippet below creates a pool specifying its name, size and validation timeout.  import   scala.concurrent.duration._  import   io.rdbc.sapi._  import   io.rdbc.pool.sapi._  val   cf :   ConnectionFactory   =   ???  val   pool   =   ConnectionPool ( cf ,   ConnectionPoolConfig ( \n               name   =   \"mypool\" , \n               size   =   50 , \n               connectionValidateTimeout   =   5. seconds . timeout ) \n            )",
            "title": "Examples"
        },
        {
            "location": "/java/java/",
            "text": "Java API is available but not yet documented.",
            "title": "Java API user guide"
        },
        {
            "location": "/privacy/",
            "text": "Data collection\n\u00b6\n\n\nThis site uses Google Analytics to collect information. No personally identifiable\ninformation is collected. This site uses Google Analytics IP address anonymization feature.\n\n\nData processing\n\u00b6\n\n\nThe site owner uses the collected data to understand how many people visit\nthe site pages and where they came from.\n\n\nOpt-out from tracking\n\u00b6\n\n\nClick \nhere\n to opt-out of the\ntracking. This will create a cookie to remember the opt-out for your browser.",
            "title": "Privacy policy"
        },
        {
            "location": "/privacy/#data-collection",
            "text": "This site uses Google Analytics to collect information. No personally identifiable\ninformation is collected. This site uses Google Analytics IP address anonymization feature.",
            "title": "Data collection"
        },
        {
            "location": "/privacy/#data-processing",
            "text": "The site owner uses the collected data to understand how many people visit\nthe site pages and where they came from.",
            "title": "Data processing"
        },
        {
            "location": "/privacy/#opt-out-from-tracking",
            "text": "Click  here  to opt-out of the\ntracking. This will create a cookie to remember the opt-out for your browser.",
            "title": "Opt-out from tracking"
        }
    ]
}